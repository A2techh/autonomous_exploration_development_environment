#!/usr/bin/env python
PACKAGE = "local_planner"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

gen.add("pathFolder", str_t, 0, "Path Folder", "$(find local_planner)/paths")
gen.add("vehicleLength", double_t, 0, "Vehicle Length", 0.6, 0, 1)
gen.add("vehicleWidth", double_t, 0, "Vehicle Width", 0.6, 0, 1)
gen.add("sensorOffsetX", double_t, 0, "Sensor Offset X", 0, -1, 1)
gen.add("sensorOffsetY", double_t, 0, "Sensor Offset Y", 0, -1, 1)
gen.add("twoWayDrive", bool_t, 0, "Two-way Drive", True)
gen.add("laserVoxelSize", double_t, 0, "Laser Voxel Size", 0.05, 0, 1)
gen.add("terrainVoxelSize", double_t, 0, "Terrain Voxel Size", 0.2, 0, 1)
gen.add("useTerrainAnalysis", bool_t, 0, "Use Terrain Analysis", False)
gen.add("checkObstacle", bool_t, 0, "Check Obstacle", True)
gen.add("checkRotObstacle", bool_t, 0, "Check Rotational Obstacle", False)
gen.add("adjacentRange", double_t, 0, "Adjacent Range", 4.25, 0, 10)
gen.add("obstacleHeightThre", double_t, 0, "Obstacle Height Threshold", 0.15, 0, 1)
gen.add("groundHeightThre", double_t, 0, "Ground Height Threshold", 0.1, 0, 1)
gen.add("costHeightThre", double_t, 0, "Cost Height Threshold", 0.1, 0, 1)
gen.add("costScore", double_t, 0, "Cost Score", 0.02, 0, 1)
gen.add("useCost", bool_t, 0, "Use Cost", False)
gen.add("pointPerPathThre", int_t, 0, "Point per Path Threshold", 2, 0, 10)
gen.add("minRelZ", double_t, 0, "Minimum Relative Z", -0.5, -1, 0)
gen.add("maxRelZ", double_t, 0, "Maximum Relative Z", 0.25, 0, 1)
gen.add("maxSpeed", double_t, 0, "Maximum Speed", 2.0, 0, 2)
gen.add("dirWeight", double_t, 0, "Direction Weight", 0.02, 0, 1)
gen.add("dirThre", double_t, 0, "Direction Threshold", 90.0, 0, 180)
gen.add("dirToVehicle", bool_t, 0, "Direction to Vehicle", False)
gen.add("pathScale", double_t, 0, "Path Scale", 1.25, 0, 2)
gen.add("minPathScale", double_t, 0, "Minimum Path Scale", 0.75, 0, 1)
gen.add("pathScaleStep", double_t, 0, "Path Scale Step", 0.25, 0, 1)
gen.add("pathScaleBySpeed", bool_t, 0, "Path Scale by Speed", True)
gen.add("minPathRange", double_t, 0, "Minimum Path Range", 1.0, 0, 5)
gen.add("pathRangeStep", double_t, 0, "Path Range Step", 0.5, 0, 2)
gen.add("pathRangeBySpeed", bool_t, 0, "Path Range by Speed", True)
gen.add("pathCropByGoal", bool_t, 0, "Path Crop by Goal", True)
gen.add("autonomyMode", bool_t, 0, "Autonomy Mode", False)
gen.add("autonomySpeed", double_t, 0, "Autonomy Speed", 1.0, 0, 2)
gen.add("joyToSpeedDelay", double_t, 0, "Joystick to Speed Delay", 2.0, 0, 5)
gen.add("joyToCheckObstacleDelay", double_t, 0, "Joystick to Check Obstacle Delay", 5.0, 0, 10)
gen.add("goalClearRange", double_t, 0, "Goal Clear Range", 0.5, 0, 2)

exit(gen.generate(PACKAGE, "local_planner", "LocalPlanner"))
